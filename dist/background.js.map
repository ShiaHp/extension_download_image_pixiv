{"version":3,"file":"background.js","sources":["webpack://pixiv-downloader/./src/ts/background/header.ts","webpack://pixiv-downloader/./src/ts/utils/api.ts","webpack://pixiv-downloader/./src/ts/utils/classified.ts","webpack://pixiv-downloader/./src/ts/utils/storage.ts","webpack://pixiv-downloader/webpack/bootstrap","webpack://pixiv-downloader/webpack/runtime/define property getters","webpack://pixiv-downloader/webpack/runtime/hasOwnProperty shorthand","webpack://pixiv-downloader/webpack/runtime/make namespace object","webpack://pixiv-downloader/./src/ts/background/background.ts"],"sourcesContent":["const regex = /access-control-allow-origin/i;\r\nexport const removeMatchingHeaders = (headers, regex) => {\r\n    for (let i = 0, header; (header = headers[i]); i++) {\r\n        if (header.name.match(regex)) {\r\n            headers.splice(i, 1);\r\n            return;\r\n        }\r\n    }\r\n};\r\nexport const responseListener = (details) => {\r\n    removeMatchingHeaders(details.responseHeaders, regex);\r\n    details.responseHeaders.push({\r\n        name: \"access-control-allow-origin\",\r\n        value: \"*\",\r\n    });\r\n};\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nexport const myHeaders = new Headers();\r\nmyHeaders.append(\"sec-fetch-site\", \"cross-site\");\r\nmyHeaders.append(\"referer\", \"https://www.pixiv.net/\");\r\nconst requestOptions = {\r\n    method: \"GET\",\r\n    headers: myHeaders,\r\n};\r\nexport class API {\r\n    static sendGetRequest(url) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'same-origin'\r\n            })\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static getBookMarkOfUser(id, type = \"illusts\", offset, limit) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const url = `https://www.pixiv.net/ajax/user/${id}/${type}/bookmarks?tag=&offset=${offset}&limit=${limit}&rest=show&lang=en`;\r\n            return this.sendGetRequest(url);\r\n        });\r\n    }\r\n    static getArtworkTwitter(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const url = `https://gettweet.onrender.com/tweet/${id}`;\r\n            return this.sendGetRequest(url);\r\n        });\r\n    }\r\n    static getArtwork(id) {\r\n        const url = `https://www.pixiv.net/ajax/illust/${id}`;\r\n        return this.sendGetRequest(url);\r\n    }\r\n    static getAllArtworks(id) {\r\n        const url = `https://www.pixiv.net/ajax/user/${id}/profile/all`;\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, requestOptions)\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { API } from \"./api\";\r\nexport const idPixiv = /\\/artworks\\/(\\d+)/;\r\nexport const idTweet = /[0-9]{19,21}/;\r\nexport const format_pixiv = 0;\r\nexport const format_twitter = 1;\r\nexport class Utils {\r\n    static isPixiv(name) {\r\n        let isPixiv = name.indexOf(\"pixiv\") > -1;\r\n        return isPixiv ? 0 : 1;\r\n    }\r\n    static getDataUrl(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const id = url.match(idPixiv)[0];\r\n            const data = yield API.getArtwork(id);\r\n            return data;\r\n        });\r\n    }\r\n    static checkData(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.getDataUrl(url).then((data) => data);\r\n        });\r\n    }\r\n    static classifiedPageCount(arkwork) {\r\n        var _a, _b;\r\n        const urlArr = [];\r\n        const pageCount = (_a = arkwork === null || arkwork === void 0 ? void 0 : arkwork.body) === null || _a === void 0 ? void 0 : _a.pageCount;\r\n        const img = (_b = arkwork === null || arkwork === void 0 ? void 0 : arkwork.body) === null || _b === void 0 ? void 0 : _b.urls.original;\r\n        if (pageCount <= 1 && arkwork) {\r\n            urlArr.push(img);\r\n        }\r\n        else {\r\n            for (let i = 0; i < pageCount; i++) {\r\n                const url = `${img}`.replace(\"_p0\", `_p${i}`);\r\n                urlArr.push(url);\r\n            }\r\n        }\r\n        return urlArr;\r\n    }\r\n}\r\n","export function setStoredSingle(idSingle) {\r\n    const vals = {\r\n        idSingle,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(vals, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function getStoredSingle() {\r\n    const keys = \"idSingle\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.idSingle) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\nexport function setImageUrlStorage(imgUrl) {\r\n    const vals = {\r\n        imgUrl,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(vals, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function setImageUrlOriginalStorage(imgUrlOriginal) {\r\n    const vals = {\r\n        imgUrlOriginal,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(vals, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function getImageUrlOriginal() {\r\n    const keys = \"imgUrlOriginal\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.imgUrlOriginal) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\nexport function getImageUrl() {\r\n    const keys = \"imgUrl\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.imgUrl) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\nexport function clearImage() {\r\n    chrome.storage.local.clear();\r\n}\r\nexport function setIDArtistStorage(idArtist) {\r\n    const val = {\r\n        idArtist,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(val, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function getIDArtistStorage() {\r\n    const keys = \"idArtist\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.idArtist) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { idPixiv, idTweet, Utils, format_twitter, format_pixiv } from \"../utils/classified\";\r\nimport { setImageUrlOriginalStorage, } from \"../utils/storage\";\r\nimport { API } from \"../utils/api\";\r\nimport { responseListener } from './header';\r\n// REQUEST REGION\r\nchrome.webRequest.onHeadersReceived.addListener(responseListener, {\r\n    urls: [\"*://*.pximg.net/*\", \"*://*.pixiv.cat/*\"],\r\n}, [\"blocking\", \"responseHeaders\", \"extraHeaders\"]);\r\nconst callAPI = (id, type) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const apiName = {\r\n        0: API.getArtwork(id),\r\n        1: API.getArtworkTwitter(id),\r\n    };\r\n    let infoArtwork = {};\r\n    yield apiName[type].then((data) => {\r\n        infoArtwork = data;\r\n    });\r\n    return infoArtwork;\r\n});\r\nconst createNewTab = (infoArtwork, type) => {\r\n    const in4toOpen = type == format_pixiv ? infoArtwork.body.urls.original : Object.values(infoArtwork)[0];\r\n    chrome.tabs.create({\r\n        active: false,\r\n        url: in4toOpen,\r\n    });\r\n    setImageUrlOriginalStorage(in4toOpen);\r\n};\r\nconst functionDownloadImage = (id, type) => __awaiter(void 0, void 0, void 0, function* () {\r\n    var _a;\r\n    const infoArtwork = yield callAPI(id, type);\r\n    const artworkName = {\r\n        0: (_a = infoArtwork === null || infoArtwork === void 0 ? void 0 : infoArtwork.body) === null || _a === void 0 ? void 0 : _a.pageCount,\r\n        1: infoArtwork,\r\n    };\r\n    if (type === format_twitter || artworkName[type] <= 1) {\r\n        createNewTab(infoArtwork, type);\r\n    }\r\n    else {\r\n        const imgList = [];\r\n        for (let i = 0; i < artworkName[type]; i++) {\r\n            const url = `${infoArtwork.body.urls.original}`.replace(\"_p0\", `_p${i}`);\r\n            imgList.push(url);\r\n        }\r\n        chrome.storage.local.set({ arrUrl1: imgList, isClose: 1 }, () => {\r\n            chrome.tabs.query({}, () => __awaiter(void 0, void 0, void 0, function* () {\r\n                chrome.tabs.create({\r\n                    active: false,\r\n                    url: infoArtwork.body.urls.original,\r\n                });\r\n            }));\r\n        });\r\n    }\r\n});\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    chrome.contextMenus.create({\r\n        contexts: [\"selection\", \"link\"],\r\n        title: \"Download image from this code\",\r\n        id: \"download-image\",\r\n    });\r\n});\r\nchrome.contextMenus.onClicked.addListener((event) => {\r\n    if (event.selectionText) {\r\n        functionDownloadImage(event.selectionText, format_pixiv);\r\n    }\r\n    else {\r\n        const typeToCheck = Utils.isPixiv(event.linkUrl);\r\n        const exactName = typeToCheck == format_pixiv ? event.linkUrl.match(idPixiv)[0] : event.linkUrl.match(idTweet)[0];\r\n        functionDownloadImage(exactName, typeToCheck);\r\n    }\r\n});\r\nchrome.runtime.onMessage.addListener(function (request) {\r\n    const data = request.data || 1;\r\n    function closeTab() {\r\n        return chrome.tabs.query({}, (tabs) => {\r\n            for (let i = 1; i <= data; i++) {\r\n                chrome.tabs.remove(tabs[tabs.length - i].id);\r\n            }\r\n        });\r\n    }\r\n    function reloadextension() {\r\n        return chrome.runtime.requestUpdateCheck(() => {\r\n            chrome.runtime.reload();\r\n        });\r\n    }\r\n    function downloadFileName() {\r\n        return chrome.downloads.download({\r\n            url: request.url,\r\n            filename: `downloadFromPixiv/${request.filename}/pixiv-${Date.now()}.filename`,\r\n            conflictAction: 'overwrite',\r\n            saveAs: false,\r\n        });\r\n    }\r\n    const getFunctionStrategies = {\r\n        Close: closeTab,\r\n        reloadextension: reloadextension,\r\n        downloadfilename: downloadFileName\r\n    };\r\n    function getFunction(typeFunction) {\r\n        return getFunctionStrategies[typeFunction];\r\n    }\r\n    if (request.notification) {\r\n        getFunction(request.notification).call();\r\n    }\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}