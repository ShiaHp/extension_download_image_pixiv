{"version":3,"file":"contentScript.js","sources":["webpack://pixiv-downloader/./src/utils/api.ts","webpack://pixiv-downloader/./src/utils/checkUrl.ts","webpack://pixiv-downloader/./src/utils/storage.ts","webpack://pixiv-downloader/webpack/bootstrap","webpack://pixiv-downloader/webpack/runtime/define property getters","webpack://pixiv-downloader/webpack/runtime/hasOwnProperty shorthand","webpack://pixiv-downloader/webpack/runtime/make namespace object","webpack://pixiv-downloader/./src/contentScript/contentScript.ts"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nexport const myHeaders = new Headers();\r\nmyHeaders.append(\"sec-fetch-site\", \"cross-site\");\r\nmyHeaders.append(\"referer\", \"https://www.pixiv.net/\");\r\nconst requestOptions = {\r\n    method: \"GET\",\r\n    headers: myHeaders,\r\n};\r\nexport class API {\r\n    static sendGetRequest(url) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'same-origin'\r\n            })\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    static getBookMarkOfUser(id, type = \"illusts\", offset, limit) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const url = `https://www.pixiv.net/ajax/user/${id}/${type}/bookmarks?tag=&offset=${offset}&limit=${limit}&rest=show&lang=en`;\r\n            return this.sendGetRequest(url);\r\n        });\r\n    }\r\n    static getArtwordDataTwitter(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const url = ` https://gettweet.onrender.com/tweet/${id}`;\r\n            return this.sendGetRequest(url);\r\n        });\r\n    }\r\n    static getArtwordData(id) {\r\n        const url = `https://www.pixiv.net/ajax/illust/${id}`;\r\n        return this.sendGetRequest(url);\r\n    }\r\n    static getAllArtworks(id) {\r\n        const url = `https://www.pixiv.net/ajax/user/${id}/profile/all`;\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, requestOptions)\r\n                .then((response) => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText,\r\n                    });\r\n                }\r\n            })\r\n                .then((data) => {\r\n                resolve(data);\r\n            })\r\n                .catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { API } from \"./api\";\r\nexport const idReg = /[0-9]{7,11}/;\r\nexport const idTweet = /[0-9]{19,21}/;\r\nexport const format_pixiv = 0;\r\nexport const format_twitter = 1;\r\nexport class checkURL {\r\n    static getDatafromRequest(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const id = url.match(idReg)[0];\r\n            const data = yield API.getArtwordData(id);\r\n            return data;\r\n        });\r\n    }\r\n    static checkData(url) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.getDatafromRequest(url).then((data) => data);\r\n        });\r\n    }\r\n    static classifiedPageCount(data) {\r\n        var _a;\r\n        const urlArr = [];\r\n        if (((_a = data === null || data === void 0 ? void 0 : data.body) === null || _a === void 0 ? void 0 : _a.pageCount) <= 1 && data) {\r\n            urlArr.push(data);\r\n        }\r\n        else {\r\n            for (let i = 0; i < data.body.pageCount; i++) {\r\n                const url = `${data.body.urls.original}`.replace(\"_p0\", `_p${i}`);\r\n                urlArr.push(url);\r\n            }\r\n        }\r\n        return urlArr;\r\n    }\r\n}\r\nexport class check {\r\n    static checkName(name) {\r\n        let isPixiv = name.indexOf(\"pixiv\") > -1;\r\n        if (isPixiv) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\nexport const buttonDownloadAllCss = `\r\n.styleButtonAll{\r\n  zIndex : 9999;\r\n  background-color: #52e010;\r\n  border-radius : 5px;\r\n  font-size : 18px;\r\n  align-content : center;\r\n  position : fixed;\r\n  color : #fff;\r\n  right : 0;\r\n  bottom : 350px;\r\n  padding : 0.5rem;\r\n  margin : 0.5rem 0.5rem 0.5rem 0;\r\n  transition : 0.2s all;\r\n  cursor : pointer;\r\n  transform : scale(0.98);\r\n  box-shadow : 3px 2px 22px 1px rgba(0, 0, 0, 0.24);\r\n  }\r\n`;\r\nexport const checkboxCss = `\r\n.stylecheckbox {\r\n  z-index : 9998;\r\n  font-size : 20px;\r\n  position : absolute;\r\n  border-radius : 5px;\r\n  top : 0px;\r\n  left : 0px;\r\n  height : 25px;\r\n  width : 25px;\r\n  background-color : rgba(255, 255, 255, 0.5rem);\r\n}\r\n`;\r\nexport const buttonCss = `\r\n.buttonCss {\r\nz-index : 9999;\r\nbackground-color: #52e010;\r\nborder-radius : 5px;\r\nfont-size : 18px;\r\nalign-content: center;\r\ncolor :  #fff;\r\nposition : absolute;\r\nright : 0;\r\ntop : 1rem;\r\npadding : 0.5rem;\r\nmargin : 0.5rem 0.5rem 0.5rem 0;\r\ntransition : 0.2s all;\r\ncursor : pointer;\r\ntransform : scale(0.98);\r\nopacity : 0.5rem;\r\nbox-shadow: 3px 2px 22px 1px rgba(0, 0, 0, 0.24);\r\n}\r\n`;\r\nexport const myImagecss = `\r\n.myImage {\r\n  borderRadius : 5px;\r\n  border : 1px solid black;\r\n  padding : 5px;\r\n  width : 150px;\r\n}\r\n\r\n`;\r\nexport const myProgresscss = `\r\n.myProgress {\r\n width : 100px;\r\n height : 10px;\r\n backgroundColor : #ddd;\r\n display : none;\r\n \r\n zIndex : 1000;\r\n\r\n position : fixed;\r\n right : 0;\r\n bottom : 0;\r\n padding : 0.5rem;\r\n margin : 0.5rem 0.5rem 0.5rem 0;\r\n display : block;\r\n  \r\n}\r\n`;\r\nexport const processBarcss = `\r\n  .processBar {\r\n   background-color : #04AA6D;\r\n  font-size :15px;\r\n  width : 10%;\r\n  height : 10px;\r\n  display : block;\r\n  }\r\n`;\r\n","export function setStoredSingle(idSingle) {\r\n    const vals = {\r\n        idSingle,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(vals, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function getStoredSingle() {\r\n    const keys = \"idSingle\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.idSingle) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\nexport function setImageUrlStorage(imgUrl) {\r\n    const vals = {\r\n        imgUrl,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(vals, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function setImageUrlOriginalStorage(imgUrlOriginal) {\r\n    const vals = {\r\n        imgUrlOriginal,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(vals, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function getImageUrlOriginal() {\r\n    const keys = \"imgUrlOriginal\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.imgUrlOriginal) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\nexport function getImageUrl() {\r\n    const keys = \"imgUrl\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.imgUrl) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\nexport function clearImageUrl() {\r\n    chrome.storage.local.clear();\r\n}\r\nexport function setIDArtistStorage(idArtist) {\r\n    const val = {\r\n        idArtist,\r\n    };\r\n    return new Promise((resolve) => {\r\n        chrome.storage.local.set(val, () => {\r\n            resolve();\r\n        });\r\n    });\r\n}\r\nexport function getIDArtistStorage() {\r\n    const keys = \"idArtist\";\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.local.get(keys, (res) => {\r\n            var _a;\r\n            resolve((_a = res.idArtist) !== null && _a !== void 0 ? _a : \"\");\r\n        });\r\n    });\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { API, myHeaders } from \"../utils/api\";\r\nimport { clearImageUrl, getImageUrlOriginal, } from \"../utils/storage\";\r\nimport { checkURL, idReg, checkboxCss, buttonCss, buttonDownloadAllCss } from \"../utils/checkUrl\";\r\nfunction downloadImage(url, msg = \"undifined\") {\r\n    return new Promise((resolve, reject) => {\r\n        fetch(url, {\r\n            method: \"get\",\r\n            credentials: \"same-origin\",\r\n            headers: myHeaders,\r\n        })\r\n            .then((response) => response.blob())\r\n            .then((blob) => {\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement(\"a\");\r\n            a.style.display = \"none\";\r\n            a.href = url;\r\n            a.download = `Ex-${Date.now()}.jpg`;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            URL.revokeObjectURL(url);\r\n        })\r\n            .then(() => {\r\n            if (msg === \"undifined\") {\r\n                return;\r\n            }\r\n            else {\r\n                chrome.runtime.sendMessage({ notification: \"Close\" });\r\n            }\r\n        })\r\n            .catch((e) => {\r\n            downloadImage(url);\r\n            resolve(e);\r\n            chrome.runtime.sendMessage({ notification: `reloadextension\"` });\r\n        });\r\n    });\r\n}\r\nlet imgIdArr = [];\r\nconst imagesArray = document.getElementsByTagName(\"img\");\r\nlet myImage = document.createElement(\"img\");\r\nconst styleImage = document.createElement(\"style\");\r\nstyleImage.innerHTML = checkboxCss;\r\nmyImage.className = \"myImage\";\r\nconst buttonDownloadAll = document.createElement(\"button\");\r\nbuttonDownloadAll.innerHTML = \"Download all\";\r\nconst styleButtonAll = document.createElement(\"style\");\r\nstyleImage.innerHTML = buttonDownloadAllCss;\r\nbuttonDownloadAll.className = \"styleButtonAll\";\r\nconst body = document.getElementsByTagName(\"body\")[0];\r\nbody.appendChild(buttonDownloadAll);\r\nbody.appendChild(styleImage);\r\nbody.appendChild(styleButtonAll);\r\nlet linkImg = \"\";\r\nsetInterval(() => {\r\n    for (let i = 2; i < imagesArray.length; i++) {\r\n        if (imagesArray.length > 2 &&\r\n            imagesArray[i].parentElement &&\r\n            imagesArray[i].parentElement.childNodes &&\r\n            imagesArray[i].parentElement.childNodes.length <= 1) {\r\n            const checkbox = document.createElement(\"input\");\r\n            const style = document.createElement(\"style\");\r\n            style.innerHTML = checkboxCss;\r\n            checkbox.className = \"stylecheckbox\";\r\n            checkbox.type = \"checkbox\";\r\n            checkbox.id = \"checkbox\";\r\n            body.appendChild(style);\r\n            const button = document.createElement(\"button\");\r\n            button.innerText = \"\\u21E9\";\r\n            const stylebutton = document.createElement(\"style\");\r\n            stylebutton.innerHTML = buttonCss;\r\n            button.className = \"buttonCss\";\r\n            body.appendChild(stylebutton);\r\n            checkbox.addEventListener(\"click\", function (e) {\r\n                e.stopPropagation();\r\n                const id = e.path[1].innerHTML.match(idReg)[0];\r\n                // check if the id is already in array\r\n                if (imgIdArr.includes(id)) {\r\n                    const index = imgIdArr.indexOf(id);\r\n                    imgIdArr.splice(index, 1);\r\n                }\r\n                else {\r\n                    imgIdArr.push(id);\r\n                }\r\n            });\r\n            imagesArray[i].addEventListener(\"mouseover\", function (e) {\r\n                myImage.src = this.src;\r\n                linkImg = this.src;\r\n            });\r\n            imagesArray[i].parentElement.appendChild(button);\r\n            imagesArray[i].parentElement.appendChild(checkbox);\r\n            button.onclick = function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                checkImage(linkImg);\r\n            };\r\n        }\r\n    }\r\n}, 100);\r\nbuttonDownloadAll.addEventListener(\"click\", function (e) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (imgIdArr.length > 0) {\r\n            const urlArr = [];\r\n            const isAllCheck = false;\r\n            Array.from(document.querySelectorAll(\"input[type=checkbox]\")).forEach((el) => (el.checked = isAllCheck));\r\n            for (let i = 0; i < imgIdArr.length; i++) {\r\n                const data = yield API.getArtwordData(imgIdArr[i]);\r\n                urlArr.push(checkURL.classifiedPageCount(data));\r\n            }\r\n            const flatUrl = urlArr.flat();\r\n            const response = flatUrl.map((element) => {\r\n                return downloadImage(element);\r\n            });\r\n            yield Promise.all(response).then(() => {\r\n                imgIdArr = [];\r\n            });\r\n        }\r\n        else {\r\n            alert(\"Please select artworks\");\r\n        }\r\n    });\r\n});\r\nlet countQueue = 0;\r\nlet queue = [];\r\nlet queueCountEveryArtworkHadBeenChoosed = [];\r\nconst myProgress = document.createElement(\"div\");\r\nmyProgress.setAttribute(\"id\", \"myProgress\");\r\nconst processBar = document.createElement(\"div\");\r\nprocessBar.setAttribute(\"id\", \"myBar\");\r\nmyProgress.appendChild(processBar);\r\nfunction createProcess(responseafterdownload, filename, urlFromAPI) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        myProgress.style.width = \"100px\";\r\n        myProgress.style.height = \"10px\";\r\n        myProgress.style.backgroundColor = \"#ddd\";\r\n        myProgress.style.display = \"none\";\r\n        processBar.style.fontSize = \"15px\";\r\n        processBar.style.width = \"10%\";\r\n        processBar.style.height = \"10px\";\r\n        myProgress.style.zIndex = \"1000\";\r\n        processBar.style.backgroundColor = \"#04AA6D\";\r\n        myProgress.style.position = \"fixed\";\r\n        myProgress.style.right = \"0\";\r\n        myProgress.style.bottom = \"0\";\r\n        myProgress.style.padding = \"0.5rem\";\r\n        myProgress.style.margin = \"0.5rem 0.5rem 0.5rem 0\";\r\n        myProgress.style.display = \"block\";\r\n        processBar.style.display = \"block\";\r\n        myProgress.style.bottom = `${countQueue * 10} px`;\r\n        body.appendChild(myProgress);\r\n        let dataDownload = yield responseafterdownload.clone();\r\n        const reader = dataDownload.body.getReader();\r\n        const contentLength = +responseafterdownload.headers.get(\"Content-Length\");\r\n        yield readContentLength(contentLength, reader, processBar, myProgress);\r\n        responseafterdownload.blob().then((blob) => __awaiter(this, void 0, void 0, function* () {\r\n            const url = URL.createObjectURL(blob);\r\n            sendDownload(url, filename);\r\n        }));\r\n    });\r\n}\r\nfunction readContentLength(contentLength, reader, processBar, myProgress1) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let receivedLength = 0;\r\n        while (true) {\r\n            const { done, value } = yield reader.read();\r\n            if (done) {\r\n                break;\r\n            }\r\n            receivedLength += value.length;\r\n            processBar.style.width =\r\n                Math.floor((receivedLength / contentLength) * 100) + \"%\";\r\n            processBar.innerHTML =\r\n                Math.floor((receivedLength / contentLength) * 100) + \"%\";\r\n        }\r\n        if (receivedLength == contentLength ||\r\n            processBar.innerHTML == \"100%\" ||\r\n            processBar.innerHTML == \"Infinity%\") {\r\n            myProgress1.style.display = \"none\";\r\n            processBar.style.width = 0 + \"%\";\r\n            processBar.innerHTML = 0 + \"%\";\r\n        }\r\n    });\r\n}\r\nfunction asyncEachUrl(array, callback) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // let countTime = 0;\r\n        for (let index = 0; index < array.length; index++) {\r\n            yield callback(array[index], index, array);\r\n        }\r\n    });\r\n}\r\nfunction checkImage(url) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        queue = [];\r\n        const data = yield checkURL.checkData(url);\r\n        const nameArtist = data.body.userName;\r\n        const count = data.body.pageCount;\r\n        const urlFromAPI = data.body.urls.original;\r\n        queueCountEveryArtworkHadBeenChoosed.push(urlFromAPI);\r\n        if (data.body.pageCount <= 1) {\r\n            const responseafterdownload = yield getUrlAfterDownload(urlFromAPI, nameArtist);\r\n            createProcess(responseafterdownload, nameArtist, urlFromAPI);\r\n        }\r\n        else {\r\n            for (let i = 0; i < count; i++) {\r\n                const url = `${urlFromAPI}`.replace(\"_p0\", `_p${i}`);\r\n                const responseafterdownload = yield getUrlAfterDownload(url, nameArtist);\r\n                queue.push(responseafterdownload);\r\n            }\r\n            // limit batch download to 10 image\r\n            asyncEachUrl(queue, (artwork) => {\r\n                createProcess(artwork, nameArtist, urlFromAPI);\r\n            });\r\n        }\r\n    });\r\n}\r\nfunction waitToDownloadAgain(delay) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n}\r\nconst fetchOptions = {\r\n    method: \"get\",\r\n    credentials: \"same-origin\",\r\n    headers: myHeaders,\r\n};\r\nfunction getRetryDownload(newurl, delay, tries, fetchOptions) {\r\n    function onError(err) {\r\n        let triesLeft = tries - 1;\r\n        if (!triesLeft) {\r\n            throw new Error(err);\r\n        }\r\n        return waitToDownloadAgain(delay).then(() => getRetryDownload(newurl, delay, triesLeft, fetchOptions));\r\n    }\r\n    return fetch(newurl, fetchOptions).catch(onError);\r\n}\r\nfunction getUrlAfterDownload(newurl, filename) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const responseafterdownload = yield fetch(newurl, {\r\n            method: \"get\",\r\n            credentials: \"same-origin\",\r\n            headers: myHeaders,\r\n        }).catch((e) => __awaiter(this, void 0, void 0, function* () {\r\n            chrome.runtime.sendMessage({ notification: `reloadextension\"` });\r\n            const responseafterdownload = yield getRetryDownload(newurl, 3000, 5, fetchOptions);\r\n            return responseafterdownload;\r\n        }));\r\n        return responseafterdownload;\r\n    });\r\n}\r\nfunction sendDownload(urlInput, filename) {\r\n    chrome.runtime.sendMessage({\r\n        notification: \"downloadfilename\",\r\n        url: urlInput,\r\n        filename: filename,\r\n    });\r\n}\r\ngetImageUrlOriginal().then((res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    if (res.length > 0) {\r\n        downloadImage(res, 'Close');\r\n    }\r\n}));\r\nchrome.storage.local.get(\"arrUrl1\", function (res) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (res || res.arrUrl1.length > 0) {\r\n            const response = res.arrUrl1.map((url) => {\r\n                return downloadImage(url);\r\n            });\r\n            yield new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                    chrome.runtime.sendMessage({ notification: \"Close\" });\r\n                    resolve();\r\n                }, 2000);\r\n            });\r\n            yield Promise.all(response);\r\n        }\r\n    });\r\n});\r\nclearImageUrl();\r\nfunction alert(arg0) {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;ACnhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}