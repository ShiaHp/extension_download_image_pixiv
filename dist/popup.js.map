{"version":3,"file":"popup.js","mappingssources":["webpack://pixiv-downloader/./src/ts/popup/popup.tsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// import { InputBase, Box, Grid, Typography, Button } from \"@material-ui/core\";\r\n// import Info from \"../popup/Info/Info\";\r\n// import { getStoredSingle, setIDArtistStorage } from \"../utils/storage\";\r\n// import { API, Artwork } from \"../utils/api\";\r\n// import \"./popup.css\";\r\n// const App: React.FC<{}> = () => {\r\n//   const [idSingle, setIdSingle] = useState<string | \"\">(\"\");\r\n//   const [idInput, setIdInput] = useState<string | \"\">(\"\");\r\n//   const [idArtist, setIdArtist] = useState<string | \"\">(\"\");\r\n//   const [imageUrl, setImageUrl] = useState<string | \"\">(\"\");\r\n//   const [offset, setOffset] = useState<number | 48>();\r\n//   const [limit, setLimit] = useState<number | 48>();\r\n//   const [illusts, setIllusts] = useState<string[] | []>([]);\r\n//   useEffect(() => {\r\n//     getStoredSingle().then((idSingle) => {\r\n//       setIdSingle(idSingle);\r\n//     });\r\n//   }, []);\r\n//   const setValueAndDownload = (value: Array<string>) => {\r\n//     const imgList = [];\r\n//     if (value.length > 0) {\r\n//       chrome.storage.local.get({ userKeyIds: [] }, function (result) {\r\n//         var userKeyIds = result.userKeyIds;\r\n//         userKeyIds.push({ keyPairId: value, HasBeenUploadedYet: false });\r\n//         chrome.storage.local.set({ userKeyIds: userKeyIds }, function () {\r\n//           chrome.storage.local.get(\"userKeyIds\", async function (result) {\r\n//             const response = result.userKeyIds[0].keyPairId.map((item) => {\r\n//               return API.getArtwork(item);\r\n//             });\r\n//             await Promise.all(response)\r\n//               .then((files) => {\r\n//                 files.forEach((file : Artwork) => {\r\n//                   if (file.body.pageCount <= 1) {\r\n//                     imgList.push(file.body.urls.original);\r\n//                   } else {\r\n//                     for (let i = 0; i < file.body.pageCount; i++) {\r\n//                       const url = `${file.body.urls.original}`.replace(\r\n//                         \"_p0\",\r\n//                         `_p${i}`\r\n//                       );\r\n//                       imgList.push(url);\r\n//                     }\r\n//                   }\r\n//                 });\r\n//               })\r\n//               .catch(function (err) {\r\n//                 console.log(err.message);\r\n//               });\r\n//             chrome.storage.local.set({ arrUrl1: imgList, isClose : 0 }, () => {\r\n//               chrome.tabs.query(\r\n//                 { active: true, currentWindow: true },\r\n//                 function (tabs) {\r\n//                   chrome.tabs.reload(tabs[0].id);\r\n//                 }\r\n//               );\r\n//             });\r\n//           });\r\n//         });\r\n//       });\r\n//     }\r\n//   };\r\n//   const handleInputButtonclick = async () => {\r\n//     const updateIdArtist = idArtist;\r\n//     await API.getAllArtworks(updateIdArtist).then((data) => {\r\n//       setIllusts(data.body.illusts);\r\n//     });\r\n//     const arrUrl = Object.keys(illusts);\r\n//     setValueAndDownload(arrUrl);\r\n//   };\r\n//   chrome.storage.local.set({\r\n//     item: imageUrl,\r\n//   });\r\n//   function getUrl() {\r\n//     chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\r\n//       const id = tabs[0].url.match(/users\\/(\\d{2,15})/)[1].toString();\r\n//       setIDArtistStorage(id).then(() => {\r\n//         setIdInput(\"\");\r\n//         setIdArtist(id);\r\n//       });\r\n//     });\r\n//   }\r\n//   const handleUserClickButton = async () => {\r\n//     const arrUrl = [];\r\n//     await API.getBookMarkOfUser(idArtist, \"illusts\", offset * 48, limit).then(\r\n//       (data) => {\r\n//         data.body.works.map((item) => {\r\n//           if (item.isMasked === false) {\r\n//             arrUrl.push(item.id);\r\n//           }\r\n//         });\r\n//         setValueAndDownload(arrUrl);\r\n//       }\r\n//     );\r\n//   };\r\n//   chrome.runtime.sendMessage({ notification: \"download\" }, () => {\r\n//     chrome.runtime.onMessage.addListener(function (request) {\r\n//       if (request.notification === \"close-window\") {\r\n//         window.close();\r\n//       }\r\n//     });\r\n//   });\r\n//   const cssButton = {\r\n//     backgroundColor: \"#10a1ef\",\r\n//     border: \"none\",\r\n//     color: \"white\",\r\n//     padding: \"10px 28px\",\r\n//     TextAlign: \"center\",\r\n//     display: \"inline-block\",\r\n//     fontSize: \"14px\",\r\n//     fontWeight: \"bold\",\r\n//     margin: \"4px 2px\",\r\n//     cursor: \"pointer\",\r\n//   };\r\n//   const styleFont = {\r\n//     border: \"1px solid black\",\r\n//     color: \"black\",\r\n//     padding: \"10px\",\r\n//     fontFamily: \"Sans-Serif\",\r\n//   };\r\n//   return (\r\n//     <Box mx=\"9px\" my=\"16px\">\r\n//       <Grid container spacing={2}>\r\n//         <Grid item>\r\n//           <Button onClick={getUrl} style = {cssButton} >\r\n//             get the info about artist{\" \"}\r\n//           </Button>\r\n//           <InputBase\r\n//             placeholder=\"Add a artist\"\r\n//             value={idInput}\r\n//             style={styleFont}\r\n//             onChange={(event: any) => {\r\n//               setIdInput(event.target.value);\r\n//             }}\r\n//           />\r\n//           <Button\r\n//             onClick={handleInputButtonclick}\r\n//             style={cssButton }\r\n//           >\r\n//             Download Artworkfrom this artist. (click 2 time to download )\r\n//           </Button>\r\n//         </Grid>\r\n//         <Grid item>\r\n//           <Info idArtist={idArtist}  />\r\n//         </Grid>\r\n//       </Grid>\r\n//       <Grid container>\r\n//         <Grid item>\r\n//           <Typography variant=\"h5\">\r\n//             Download from your bookmarks\r\n//           </Typography>\r\n//           <Button onClick={getUrl} style={{ border: \"3px solid black\" }}>\r\n//             Get Your id\r\n//           </Button>\r\n//         </Grid>\r\n//         <Grid item>\r\n//           {/* offset : là số tranh sẽ bỏ qua : bỏ qua 48 là bỏ page 1 */}\r\n//           <InputBase\r\n//             placeholder=\"add your offset to download image. Default type is : illusts\"\r\n//             value={offset}\r\n//             style={styleFont}\r\n//             onChange={(event: any) => {\r\n//               setOffset(event.target.value);\r\n//             }}\r\n//           />\r\n//           {/* limit : giới hạn tranh tải về trong 1 lượt : mặc định là 48 */}\r\n//           <InputBase\r\n//             placeholder=\"add your limit to download image\"\r\n//             value={limit}\r\n//             style={styleFont}\r\n//             onChange={(event: any) => {\r\n//               setLimit(event.target.value);\r\n//             }}\r\n//           />\r\n//           <Button\r\n//             onClick={handleUserClickButton}\r\n//             style={cssButton }\r\n//           >\r\n//             Download Artworkfrom your bookmarks\r\n//           </Button>\r\n//         </Grid>\r\n//       </Grid>\r\n//     </Box>\r\n//   );\r\n// };\r\n// const root = document.createElement(\"div\");\r\n// document.body.appendChild(root);\r\n// ReactDOM.render(<App />, root);\r\n"],"names":[],"sourceRoot":""}